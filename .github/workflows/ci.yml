name: Continuous Integration

on:
  push:
    branches:
    - master
    - develop

  pull_request:
    branches:
    - develop

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: "3.8"
        cache: pip

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    env: { CXX: clang++-14 }

    steps:
    - uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"
        cache: pip

    - name: Install dependencies
      run: |
        pip3 install conan ninja
        .github/scripts/conan-profile.sh
        conan install . -b missing

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-12, ubuntu-22.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"
        cache: pip

    - name: Setup environment
      shell: bash
      run: |
        pip3 install conan ninja
        .github/scripts/conan-profile.sh
        conan install . -b missing
        pip3 install -r python/requirements.txt
        dir="$(python3 -m nanobind --cmake_dir)"
        printf nanobind_DIR=%s\\n "$dir" >> "$GITHUB_ENV"

    - name: Enter MSVC Developer Shell
      if: matrix.os == 'windows-2022'
      uses: ilammy/msvc-dev-cmd@v1
      with: { arch: amd64 }

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        -DBUILD_PYTHON_BINDINGS=YES

    - name: Build
      shell: bash
      run: |
        (output="$(cmake --build build -t nanobind-static 2>&1)" \
        || (printf %s\\n "$output" && false))
        cmake --build build

    - name: Install
      run: cmake --install build --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -j 2
